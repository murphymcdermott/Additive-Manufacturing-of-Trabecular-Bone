
function fun_Inp(File_Name,Nodes,Elements,Elements_Sets,Nodes_Sets,Young_Modulus_List,Poisson_Ratio,BC)

%% PARAMETERS AND FILE CREATION 
Job_Name = 'Job-1' ; Part_Name = 'Part-1' ; Element_Type = 'C3D8R' ;
fid = fopen(File_Name,'wt') ;

%% Modification of the file 

% Headers
fprintf(fid,['*Heading',char(10),strrep('** Job name: Job-1 Model name: Model-1','Job-1',Job_Name),char(10),'** Generated by: Abaqus/CAE 2021',char(10),'*Preprint, echo=NO, model=NO, history=NO, contact=NO',char(10),'**',char(10)]) ;

% Materials
fprintf(fid,['** MATERIALS',char(10),'**',char(10)]) ;
for i_Set = 1:size(Young_Modulus_List,2)
    fprintf(fid,[strrep('*Material, name=Material_Name','Material_Name',upper(sprintf('Material_%d',i_Set))),char(10),'*Elastic',char(10),sprintf('%d, %d',Young_Modulus_List(i_Set),Poisson_Ratio),char(10),'**',char(10)]) ;
end

% Parts
fprintf(fid,['** PARTS',char(10),'**',char(10),strrep('*Part, name=Part-1','Part-1',Part_Name),char(10)]) ;

% Nodes
fprintf(fid,['*Node',char(10)]) ;
for i_Node = 1:size(Nodes,1)
    x = Nodes(i_Node,1) ; y = Nodes(i_Node,2) ; z = Nodes(i_Node,3) ;
    if ~mod(x,1) ; x = [num2str(x),'.'] ; else x = num2str(x) ; end
    if ~mod(y,1) ; y = [num2str(y),'.'] ; else y = num2str(y) ; end
    if ~mod(z,1) ; z = [num2str(z),'.'] ; else z = num2str(z) ; end
    fprintf(fid,[[repmat(' ',1,7-length(num2str(i_Node))),num2str(i_Node),','],repmat(' ',1,13-length(x)),x,',',repmat(' ',1,13-length(y)),y,',',repmat(' ',1,13-length(z)),z,char(10)]) ;
end

% Elements
fprintf(fid,[strrep('*Element, type=C3D8R','C3D8R',Element_Type),char(10)]) ;
for i_Element = 1:size(Elements,1)
    fprintf(fid,sprintf(['  %d,  %d,  %d,  %d,  %d,  %d,  %d,  %d,  %d',char(10)],i_Element,Elements(i_Element,:))) ;
end

% Create element sets 
for i_Set = 1:size(Elements_Sets,2) ; Nb_Col = 16 ;
    fprintf(fid,[sprintf('*Elset, elset=Set-%d',i_Set),char(10)]) ;
    n = ceil(size(Elements_Sets{i_Set},1)/Nb_Col) ;
    Set = reshape([Elements_Sets{i_Set} ; zeros(Nb_Col*n-numel(Elements_Sets{i_Set}),1)],Nb_Col,n)' ;
    for i_Line = 1:n
        Line = num2str(nonzeros(Set(i_Line,:))') ;
        while contains(Line,'  ') ; Line = strrep(Line,'  ',' ') ; end
        fprintf(fid,[' ',strrep(Line,' ',', '),char(10)]) ;
    end
end

% Sections
for i_Set = 1:size(Elements_Sets,2)
    fprintf(fid,[sprintf('** Section: Section-%d',i_Set),char(10),sprintf('*Solid Section, elset=Set-%d,',i_Set),strrep(' material=Material_Name','Material_Name',upper(sprintf('Material_%d',i_Set))),char(10),',',char(10)]) ;
end
fprintf(fid,['*End Part',char(10),'**',char(10),'**',char(10)]) ;

% Assembly
fprintf(fid,['** ASSEMBLY',char(10),'**',char(10),'*Assembly, name=Assembly',char(10),'**',char(10),strrep('*Instance, name=Part-1-1, part=Part-1','Part-1',Part_Name),char(10),'*End Instance',char(10),'**',char(10)]) ;

% Create nodes sets 
for i_Set = 1:size(Nodes_Sets,2) ; Nb_Col = 16 ;
    fprintf(fid,[strrep(sprintf('*Nset, nset=Set-%d, instance=PART-1',i_Set),'PART',upper(Part_Name)),char(10)]) ;
    n = ceil(size(Nodes_Sets{i_Set},1)/Nb_Col) ;
    Set = reshape([Nodes_Sets{i_Set} ; zeros(Nb_Col*n-numel(Nodes_Sets{i_Set}),1)],Nb_Col,n)' ;
    for i_Line = 1:n
        Line = num2str(nonzeros(Set(i_Line,:))') ;
        while contains(Line,'  ') ; Line = strrep(Line,'  ',' ') ; end
        fprintf(fid,[' ',strrep(Line,' ',', '),char(10)]) ;
    end
end
fprintf(fid,['*End Assembly',char(10),'**',char(10)]) ;

% Step
fprintf(fid,['** STEP: Step-1',char(10),'**',char(10),'*Step, name=Step-1, nlgeom=NO',char(10),'*Static',char(10),sprintf('%d, %d, %d, %d',1., 1., 1e-05, 1.),char(10),'**',char(10)]) ;

% Bondary conditions
for i_BC = 1:size(BC,2)
    fprintf(fid,['** BOUNDARY CONDITIONS',char(10),'**',char(10),BC{i_BC},char(10),'**',char(10)]) ;
end

% Outputs request
fprintf(fid,['** OUTPUT REQUESTS',char(10),'**',char(10),'*Restart, write, frequency=0',char(10),'**',char(10),'** FIELD OUTPUT: F-Output-1',char(10),'**',char(10),'*Output, field',char(10),'*Contact Output',char(10),'CDISP, CSTRESS',char(10),'**',char(10),'** FIELD OUTPUT: F-Output-2',char(10),'**',char(10),'*Node Output',char(10),'CF, RF, U',char(10),'**',char(10),'** FIELD OUTPUT: F-Output-3',char(10),'**',char(10),'*Element Output, directions=YES',char(10),'IVOL, LE, PE, PEEQ, PEMAG, S',char(10),'**',char(10),'** HISTORY OUTPUT: H-Output-1',char(10),'**',char(10),'*Output, history, variable=PRESELECT',char(10),'*End Step']) ;
end
